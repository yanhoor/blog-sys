FROM node:19.8.1

# 指定作者
LABEL maintainer="yanhoor"

# 指定容器内的工作路径，这是容器内的目录
WORKDIR /projects/blog-node

# 复制全部文件，源代码，将 . 项目中的当前目录复制到 . 镜像中的工作目录。
# COPY [source1] [source2]...[target] source 路径相对于当前文件，target 路径相对于上面的 WORKDIR，以 / 结尾，否则当作文件
# 复制 package.json package-lock.json
# 如果package.json和源代码一起添加到镜像，则每次修改源码都需要重新安装npm模块
#COPY ./package*.json prisma .env ecosystem.config.js ./
COPY ./package*.json ./
#COPY ./prisma ./
#COPY ./.env ./

# 运行命令，安装依赖
# Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大

# 例如 RUN npm install && cd /app && mkdir logs
# RUN npm install --registry=https://registry.npm.taobao.org
RUN npm install -g yarn --registry=https://registry.npm.taobao.org \
    && yarn add -g pm2 \
    && yarn install

# RUN npx prisma generate \
    #&& npx prisma db push

COPY . .

#ENV DATABASE_URL="mysql://root:145261yan@mysql:3306/blogKoa2"
# CMD 指令只能一个，是容器启动后执行的命令，算是程序的入口。
# 如果还需要运行其他命令可以用 && 连接，也可以写成一个shell脚本去执行。
# 例如 CMD cd /app && ./start.sh
CMD ["npm","run","prod"]

# 暴露端口到宿主机
EXPOSE 8000
