generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 通知类型
enum NotificationType {
  collect_blog
  like_blog
  comment
  comment_reply
}

// 模型，对应数据库的表
model User {
  // 字段名----字段类型（又分为标量类型，如 Int/String 等，或模型类型，如 Blog[]）----属性，如 @id
  // 字段类型后面可以有类型修饰符 ? 和 []，如 String? 表示非必须，Blog[] 表示该字段值是列表。没有修饰符的是必填字段，不能为空
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  lastActiveAt  DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lock          Int       @default(2) // 1--锁定， 2--正常
  name          String    @db.VarChar(255)
  avatar        String?   @db.VarChar(255)
  profileCardBg String?   @db.VarChar(255)
  introduce     String?   @db.VarChar(255)
  sign          String?   @db.VarChar(255)
  mobile        String    @unique @db.VarChar(255) // @unique 唯一值
  password      String    @db.VarChar(255)
  type          Int       @default(2) // 1--超级管理员，2--普通用户
  gender        Int       @default(0) // 1--男，2--女
  birthday      DateTime?
  deletedAt     DateTime?

  blogs                Blog[]             @relation("CreateBlog")
  // 与博客likeBy显式多对多
  likeBlogs            UserLikeBlogs[]
  collectBlogs         UserCollectBlogs[]
  createNotifications  Notification[]     @relation("CreateNotification")
  receiveNotifications Notification[]     @relation("ReceiveNotifications")
  createComments       Comment[]          @relation("CreateComment")
  blogCates            BlogCate[]
  replyComments        Comment[]          @relation("ReplyComment")
  medias               Media[]            @relation("Media")
  // 隐式多对多关系
  // 粉丝
  followers            User[]             @relation("Follow")
  // 关注
  followings           User[]             @relation("Follow")
  // 创建的关注分组
  followGroups         FollowGroup[]      @relation("CreateFollowGroup")
  // 所在的关注分组
  inFollowGroups       FollowGroup[]      @relation("InFollowGroup")

  @@index([createdAt])
}

// 关注分组
model FollowGroup {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createBy     User     @relation(name: "CreateFollowGroup", fields: [createById], references: [id])
  createById   Int
  // 包含的用户
  containUsers User[]   @relation("InFollowGroup")
  name         String   @db.VarChar(255)

  deletedAt DateTime?
}

model BlogCate {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createBy   User     @relation(fields: [createById], references: [id])
  createById Int
  name       String   @db.VarChar(255)

  deletedAt DateTime?
  blogs     Blog[]
}

// 点赞博客关系表
model UserLikeBlogs {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  blog       Blog     @relation(fields: [blogId], references: [id])
  blogId     Int
  assignedAt DateTime @default(now())

  @@id([userId, blogId])
}

// 收藏博客关系表
model UserCollectBlogs {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  blog       Blog     @relation(fields: [blogId], references: [id])
  blogId     Int
  assignedAt DateTime @default(now())

  // 这样应该使用
  // {
  //    userId_blogId: {
  //      userId,
  //      blogId: id
  //    }
  // }
  @@id([userId, blogId])
}

model Media {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  createBy   User     @relation(name: "Media", fields: [createById], references: [id])
  createById Int
  url        String   @unique
  blogId     Int?
  blog       Blog?    @relation(fields: [blogId], references: [id])

  deletedAt DateTime?

  @@index([createdAt])
}

model Blog {
  id          Int                @id @default(autoincrement())
  createdAt   DateTime           @default(now())
  createBy    User               @relation(name: "CreateBlog", fields: [createById], references: [id])
  createById  Int
  likedBy     UserLikeBlogs[]
  collectedBy UserCollectBlogs[]
  updatedAt   DateTime           @updatedAt
  cate        BlogCate?          @relation(fields: [cateId], references: [id])
  cateId      Int?
  launch      Int                @default(0)
  operateAt   DateTime? // 发布/下架时间

  // title   String @db.VarChar(255)
  content String @db.Text

  deletedAt     DateTime?
  comments      Comment[]
  notifications Notification[]
  medias        Media[]

  @@index([createdAt])
}

// 通知
model Notification {
  id            Int              @id @default(autoincrement())
  createdAt     DateTime         @default(now())
  createBy      User             @relation(name: "CreateNotification", fields: [createById], references: [id])
  createById    Int
  receiveUser   User?            @relation(name: "ReceiveNotifications", fields: [receiveUserId], references: [id])
  receiveUserId Int?
  blogId        Int?
  blog          Blog?            @relation(fields: [blogId], references: [id])
  commentId     Int?
  comment       Comment?         @relation(fields: [commentId], references: [id])
  content       Json?
  isRead        Int?             @default(0)
  type          NotificationType

  deletedAt DateTime?

  @@index([createdAt])
}

// 博客评论及回复
model Comment {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  createBy       User      @relation(name: "CreateComment", fields: [createById], references: [id])
  createById     Int
  replyTo        User?     @relation(name: "ReplyComment", fields: [replyToId], references: [id])
  replyToId      Int?
  blog           Blog      @relation(fields: [blogId], references: [id])
  blogId         Int
  // 作为评论回复时，所属的一级评论id
  topCommentId   Int?
  topComment     Comment?  @relation(name: "ChildComment", fields: [topCommentId], references: [id])
  // 作为一级评论时，下面的所有回复
  childComments  Comment[] @relation("ChildComment")
  // 作为评论回复时，回复哪个评论回复（不是一级）
  replyCommentId Int?
  replyComment   Comment?  @relation(name: "Reply", fields: [replyCommentId], references: [id])
  // 作为评论回复时，收到的所有的回复
  replyItems     Comment[] @relation("Reply")

  content       String         @db.Text
  notifications Notification[]

  deletedAt DateTime?

  @@index([createdAt])
}
