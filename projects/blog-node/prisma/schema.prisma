generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["clientExtensions", "filteredRelationCount"]
}

// 关系计数filteredRelationCount: https://www.prisma.io/docs/concepts/components/prisma-client/aggregation-grouping-summarizing#filter-the-relation-count

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 通知类型
enum NotificationType {
  collect_blog // 博客被收藏
  like_blog // 博客被点赞
  comment // 博客被评论
  comment_reply // 评论被回复
  system_audit // 评论/博客审核
}

// 文件类型
enum FileType {
  video
  audio
  image
}

// 移动端平台类型
enum PlatformType {
  android
  ios
  miniProgram
}

// 模型，对应数据库的表
model User {
  // 字段名----字段类型（又分为标量类型，如 Int/String 等，或模型类型，如 Blog[]）----属性，如 @id
  // 字段类型后面可以有类型修饰符 ? 和 []，如 String? 表示非必须，Blog[] 表示该字段值是列表。没有修饰符的是必填字段，不能为空
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  lastActiveAt  DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lock          Int       @default(2) // 1--锁定， 2--正常
  name          String    @unique @db.VarChar(255)
  avatar        String?   @db.VarChar(255)
  profileCardBg String?   @db.VarChar(255)
  introduce     String?   @db.VarChar(255)
  mobile        String    @unique @db.VarChar(255) // @unique 唯一值
  password      String    @db.VarChar(255)
  type          Int       @default(2) // 1--超级管理员，2--普通用户
  gender        Int       @default(0) // 1--男，2--女
  birthday      DateTime?
  openid        String?   @unique @db.VarChar(255)
  deletedAt     DateTime?

  blogs                Blog[]                    @relation("CreateBlog")
  // 与博客likeBy显式多对多
  likeBlogs            LikeBlogRelation[]
  collectBlogs         UserCollectBlogs[]
  readBlogs            ReadBlogsRelation[]
  likeComments         UserLikeCommentRelation[]
  createNotifications  Notification[]            @relation("CreateNotification")
  receiveNotifications Notification[]            @relation("ReceiveNotifications")
  createComments       Comment[]                 @relation("CreateComment")
  auditComments        Comment[]                 @relation("AuditComment")
  auditBlogs           Blog[]                    @relation("AuditBlog")
  replyComments        Comment[]                 @relation("ReplyComment")
  medias               Media[]                   @relation("Media")
  mobileVersions       UpdateVersion[]           @relation("CreateVersion")
  customContents       CustomContent[]           @relation("CreateCustomContent")
  // 隐式多对多关系
  // 粉丝
  followers            FollowRelation[]          @relation("FollowTarget")
  // 关注
  followings           FollowRelation[]          @relation("FollowBy")
  // 创建的关注分组
  followGroups         FollowGroup[]             @relation("CreateFollowGroup")
  // 所在的关注分组
  inFollowGroups       FollowGroup[]             @relation("InFollowGroup")
  files                File[]
  topics               Topic[]                   @relation("CreateTopic")

  @@index([createdAt])
}

// 关注分组
model FollowGroup {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createBy     User     @relation(name: "CreateFollowGroup", fields: [createById], references: [id])
  createById   String
  sort         Int      @default(0)
  // 包含的用户
  containUsers User[]   @relation("InFollowGroup")
  name         String   @db.VarChar(255)
  system       Int      @default(2) // 1--是，2--否

  deletedAt DateTime?
}

model FollowRelation {
  user       User     @relation(name: "FollowTarget", fields: [userId], references: [id])
  userId     String
  // FollowBy 关注了 FollowTarget
  followBy   User     @relation(name: "FollowBy", fields: [followById], references: [id])
  followById String
  assignedAt DateTime @default(now())

  @@id([userId, followById])
}

// 点赞博客关系表
model LikeBlogRelation {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  blog       Blog     @relation(fields: [blogId], references: [id])
  blogId     String
  assignedAt DateTime @default(now())

  @@id([userId, blogId])
}

// 收藏博客关系表
model UserCollectBlogs {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  blog       Blog     @relation(fields: [blogId], references: [id])
  blogId     String
  assignedAt DateTime @default(now())

  // 这样应该使用
  // {
  //    userId_blogId: {
  //      userId,
  //      blogId: id
  //    }
  // }
  @@id([userId, blogId])
}

// 阅读博客关系表
model ReadBlogsRelation {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  blog       Blog     @relation(fields: [blogId], references: [id])
  blogId     String
  assignedAt DateTime @default(now())

  @@id([userId, blogId])
}

model Media {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  createBy   User     @relation(name: "Media", fields: [createById], references: [id])
  createById String
  title      String?  @db.Text
  fileId     String
  file       File     @relation(name: "MediaFile", fields: [fileId], references: [id])
  coverId    String?
  cover      File?    @relation(name: "CoverMedia", fields: [coverId], references: [id])
  blogId     String?
  blog       Blog?    @relation(name: "BlogCreateMedia", fields: [blogId], references: [id])

  deletedAt DateTime?

  @@index([createdAt])
}

model File {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  createBy   User     @relation(fields: [createById], references: [id])
  createById String
  md5        String   @db.Text
  url        String   @unique
  type       FileType

  deletedAt  DateTime?
  media      Media[]   @relation("MediaFile")
  coverMedia Media[]   @relation("CoverMedia")
  Comment    Comment[] @relation("CommentImage")

  @@index([createdAt])
}

model Blog {
  id          String              @id @default(uuid())
  createdAt   DateTime            @default(now())
  createBy    User                @relation(name: "CreateBlog", fields: [createById], references: [id])
  createById  String
  likedBy     LikeBlogRelation[]
  collectedBy UserCollectBlogs[]
  readBy      ReadBlogsRelation[]
  updatedAt   DateTime
  auditBy     User?               @relation(name: "AuditBlog", fields: [auditById], references: [id])
  auditById   String?
  auditTip    String?             @db.VarChar(255)
  auditStatus Int                 @default(0) // 1--审核通过，0--未审核，2--审核不通过
  auditedAt   DateTime? // 审核时间
  status      Int                 @default(1) // 1--未审核，2--审核通过，3--审核不通过，4--删除
  address     String?             @db.Text // 详细地址
  addressName String?             @db.Text // 位置名称
  latitude    Float?              @db.Double
  longitude   Float?              @db.Double // 经度

  // title   String @db.VarChar(255)
  content String @db.Text

  deletedAt           DateTime?
  comments            Comment[]
  notifications       Notification[]
  medias              Media[]             @relation("BlogCreateMedia")
  topics              BlogTopicRelation[] @relation("TopicBlog")
  retweetBlog         Blog[]              @relation("RetweetOrigin")
  // 多层转发的第一条博客
  retweetOriginBlogId String?
  retweetOriginBlog   Blog?               @relation("RetweetOrigin", fields: [retweetOriginBlogId], references: [id])
  // 隐式多对多转发关系
  referrerBlogs       Blog[]              @relation(name: "BlogRefernce") // 被谁转发
  referenceBlogs      Blog[]              @relation(name: "BlogRefernce") // 转发的博客列表。对于被转发的，自身就是 ReferrerBlog

  @@index([createdAt])
}

// 转发关系，a 转发 b，则 a 作为 referrerId
// model BlogRetweetRelationgRetweetRelation {
//   referrerId    Int
//   referrerBlog  Blog     @relation(name: "ReferrerBlog", fields: [referrerId], references: [id])
//   // 被转发
//   referenceId   Int
//   referenceBlog Blog     @relation(name: "RefernceBlog", fields: [referenceId], references: [id])
//   assignedAt    DateTime @default(now())
//
//   @@id([referrerId, referenceId])
// }

// 博客话题
model Topic {
  id         String              @id @default(uuid())
  createdAt  DateTime            @default(now())
  createBy   User                @relation(name: "CreateTopic", fields: [createById], references: [id])
  createById String
  content    String              @unique
  deletedAt  DateTime?
  blogs      BlogTopicRelation[] @relation("BlogTopic")

  @@index([content(length: 20)], name: "content")
}

// 博客话题关系表
model BlogTopicRelation {
  blog       Blog     @relation(name: "TopicBlog", fields: [blogId], references: [id])
  blogId     String
  topic      Topic    @relation(name: "BlogTopic", fields: [topicId], references: [id])
  topicId    String
  // offset     Int // 在博客内容的开始位置
  assignedAt DateTime @default(now())

  @@id([blogId, topicId])
}

// 通知
model Notification {
  id            String           @id @default(uuid())
  createdAt     DateTime         @default(now())
  createBy      User             @relation(name: "CreateNotification", fields: [createById], references: [id])
  createById    String
  receiveUser   User?            @relation(name: "ReceiveNotifications", fields: [receiveUserId], references: [id])
  receiveUserId String?
  blogId        String?
  blog          Blog?            @relation(fields: [blogId], references: [id])
  commentId     String?
  comment       Comment?         @relation(fields: [commentId], references: [id])
  content       Json?
  isRead        Int?             @default(0) // 0--未读，1--已读
  type          NotificationType

  deletedAt DateTime?

  @@index([createdAt])
}

// 博客评论及回复
model Comment {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  createBy       User      @relation(name: "CreateComment", fields: [createById], references: [id])
  createById     String
  auditBy        User?     @relation(name: "AuditComment", fields: [auditById], references: [id])
  auditById      String?
  auditTip       String?   @db.VarChar(255)
  auditStatus    Int       @default(0) // 1--审核通过，0--未审核，2--审核不通过
  auditedAt      DateTime? // 审核时间
  status         Int       @default(1) // 1--未审核，2--审核通过，3--审核不通过，4--删除
  replyTo        User?     @relation(name: "ReplyComment", fields: [replyToId], references: [id])
  replyToId      String? // 回复的上级评论的作者
  blog           Blog      @relation(fields: [blogId], references: [id])
  blogId         String
  // 作为评论回复时，所属的一级评论id
  topCommentId   String?
  topComment     Comment?  @relation(name: "ChildComment", fields: [topCommentId], references: [id])
  // 作为一级评论时，下面的所有回复
  childComments  Comment[] @relation("ChildComment")
  // 作为评论回复时，回复哪个评论回复（不是一级）
  replyCommentId String?
  replyComment   Comment?  @relation(name: "Reply", fields: [replyCommentId], references: [id])
  // 作为评论回复时，收到的所有的回复
  replyItems     Comment[] @relation("Reply")

  imageId String?
  image   File?   @relation(name: "CommentImage", fields: [imageId], references: [id])

  content       String?        @db.Text
  notifications Notification[]

  likedBy UserLikeCommentRelation[]

  deletedAt DateTime?

  @@index([createdAt])
}

// 点赞评论关系表
model UserLikeCommentRelation {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  comment    Comment  @relation(fields: [commentId], references: [id])
  commentId  String
  assignedAt DateTime @default(now())

  @@id([userId, commentId])
}

model UpdateVersion {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  createBy    User         @relation(name: "CreateVersion", fields: [createById], references: [id])
  createById  String
  // 平台类型
  platform    PlatformType
  // 是否发布
  publish     Boolean      @default(false)
  // 是否强制更新
  forceUpdate Boolean      @default(false)
  // 下载地址
  url         String       @db.Text
  // 版本号
  version     String       @db.Text
  // 更新记录
  changeLog   String?      @db.Text
}

model CustomContent {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  createBy   User     @relation(name: "CreateCustomContent", fields: [createById], references: [id])
  createById String
}
