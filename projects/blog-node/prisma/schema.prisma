generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 模型，对应数据库的表
model User {
  // 字段名----字段类型（又分为标量类型，如 Int/String 等，或模型类型，如 Blog[]）----属性，如 @id
  // 字段类型后面可以有类型修饰符 ? 和 []，如 String? 表示非必须，Blog[] 表示该字段值是列表。没有修饰符的是必填字段，不能为空
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  name      String    @db.VarChar(255)
  avatar    String?   @db.VarChar(255)
  introduce String?   @db.VarChar(255)
  mobile    String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  birthday  DateTime?
  deletedAt DateTime?

  blogs                Blog[]          @relation("CreateBlog")
  // 与博客likeBy隐式多对多
  likeBlogs            UserLikeBlogs[]
  createNotifications  Notification[]  @relation("CreateNotification")
  receiveNotifications Notification[]  @relation("ReceiveNotifications")
  createComments       Comment[]       @relation("CreateComment")

  blogCates     BlogCate[]
  replyComments Comment[]  @relation("ReplyComment")

  @@index([createdAt])
}

model BlogCate {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createBy   User     @relation(fields: [createById], references: [id])
  createById Int
  name       String   @db.VarChar(255)

  deletedAt DateTime?
  blogs     Blog[]
}

model UserLikeBlogs {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  blog       Blog     @relation(fields: [blogId], references: [id])
  blogId     Int
  assignedAt DateTime @default(now())

  @@id([userId, blogId])
}

model Blog {
  id         Int             @id @default(autoincrement())
  createdAt  DateTime        @default(now())
  createBy   User            @relation(name: "CreateBlog", fields: [createById], references: [id])
  createById Int
  likedBy    UserLikeBlogs[]
  updatedAt  DateTime        @updatedAt
  cate       BlogCate?       @relation(fields: [cateId], references: [id])
  cateId     Int?
  launch     Int             @default(0)
  operateAt  DateTime? // 发布/下架时间

  title   String @db.VarChar(255)
  content String @db.Text

  deletedAt DateTime?
  comments  Comment[]

  @@index([createdAt])
}

model Notification {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  createBy      User     @relation(name: "CreateNotification", fields: [createById], references: [id])
  createById    Int
  receiveUser   User?    @relation(name: "ReceiveNotifications", fields: [receiveUserId], references: [id])
  receiveUserId Int?
  content       String   @db.Text
  isRead        Int?     @default(0)

  deletedAt DateTime?

  @@index([createdAt])
}

model Comment {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  createBy       User      @relation(name: "CreateComment", fields: [createById], references: [id])
  createById     Int
  replyTo        User?     @relation(name: "ReplyComment", fields: [replyToId], references: [id])
  replyToId      Int?
  blog           Blog      @relation(fields: [blogId], references: [id])
  blogId         Int
  // 回复哪个评论
  replyCommentId Int?
  replyComment   Comment?  @relation(name: "Reply", fields: [replyCommentId], references: [id])
  // 回复
  replyItems     Comment[] @relation("Reply")

  content String @db.Text

  deletedAt DateTime?

  @@index([createdAt])
}
